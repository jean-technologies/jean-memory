"use client";

import { motion } from "framer-motion";
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/components/ui/use-toast';
import apiClient from "@/lib/apiClient"; // Import the api client
import ReactMarkdown from 'react-markdown';

export function AnalysisPanel() {
  const { accessToken } = useAuth();
  const { toast } = useToast();
  const [narrative, setNarrative] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [memoryCount, setMemoryCount] = useState(0);

  useEffect(() => {
    // Auto-generate narrative on page load if user has >5 memories
    const autoGenerateNarrative = async () => {
      if (!accessToken || hasAutoGenerated) return;
      
      try {
        setIsLoading(true);
        setError('');
        
        // First, check how many memories the user has
        // Note: API now returns array directly, not paginated response
        const memoriesResponse = await apiClient.get('/api/v1/memories/');
        const totalMemories = Array.isArray(memoriesResponse.data) ? memoriesResponse.data.length : 0;
        setMemoryCount(totalMemories);
        
        // Auto-generate if user has >5 memories
        if (totalMemories > 5) {
          setIsGenerating(true);
          
          // Call the backend narrative endpoint - it handles Jean Memory V2 internally
          const narrativeResponse = await apiClient.get('/api/v1/memories/narrative');

          if (narrativeResponse.data && narrativeResponse.data.narrative) {
            setNarrative(narrativeResponse.data.narrative);
            setHasAutoGenerated(true);
            
            // Only show success toast for manual generation, not auto-generation
            // toast({
            //   title: 'Narrative Generated',
            //   description: 'Your life narrative has been generated using Jean Memory V2.',
            // });
          } else {
            throw new Error('No narrative data received from server.');
          }
        } else {
          // User doesn't have enough memories for auto-generation
          setHasAutoGenerated(true); // Mark as checked to prevent retries
        }
        
      } catch (err: any) {
        const errorMessage = err.response?.data?.detail || err.message || 'An unknown error occurred.';
        setError(errorMessage);
        console.error('Auto-generation error:', errorMessage);
        
        // Don't show toast for auto-generation errors, just log them
        setHasAutoGenerated(true); // Mark as checked to prevent retries
      } finally {
        setIsLoading(false);
        setIsGenerating(false);
      }
    };

    autoGenerateNarrative();
  }, [accessToken, hasAutoGenerated]);

  const handleGenerateNarrative = async () => {
    setIsGenerating(true);
    setError('');

    try {
      // Call the backend narrative endpoint with force_regenerate for manual generation
      const narrativeResponse = await apiClient.get('/api/v1/memories/narrative?force_regenerate=true');

      if (narrativeResponse.data && narrativeResponse.data.narrative) {
        setNarrative(narrativeResponse.data.narrative);
        toast({
          title: 'Narrative Generated',
          description: 'Your life narrative has been generated using Jean Memory V2.',
        });
      } else {
        throw new Error('No narrative data received from server.');
      }
    } catch (err: any) {
      const errorMessage = err.response?.data?.detail || err.message || 'An unknown error occurred.';
      setError(errorMessage);
      toast({
        variant: 'destructive',
        title: 'Error Generating Narrative',
        description: errorMessage,
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5, delay: 0.2 }}
      className="bg-card/20 backdrop-blur-sm border border-border rounded-xl flex flex-col h-full"
    >
      {/* Sticky Header */}
      <div className="px-6 pt-6 pb-4 border-b border-border/50 flex-shrink-0">
        <h2 className="text-xl font-bold text-foreground">Your Life's Narrative</h2>
         <p className="text-sm text-muted-foreground">
          A summary of your life based on your memories.
        </p>
      </div>
      
      {/* Scrollable Content */}
      <div className="px-6 py-4 overflow-y-auto flex-1">
        {isLoading || isGenerating ? (
          <div className="flex items-center justify-center min-h-[200px]">
            <div className="text-center">
              <div className="animate-pulse text-primary mb-2 font-medium">
                {isLoading ? 'Loading your narrative...' : 'Generating Narrative...'}
              </div>
            </div>
          </div>
        ) : error ? (
          <div className="flex items-center justify-center min-h-[200px]">
            <div className='text-center'>
                <p className="text-destructive mb-4">{error}</p>
                <Button onClick={handleGenerateNarrative} disabled={isGenerating}>
                    {isGenerating ? 'Generating...' : 'Try Again'}
                </Button>
            </div>
          </div>
        ) : narrative ? (
          <div className="text-muted-foreground text-sm prose dark:prose-invert prose-sm max-w-none">
            <ReactMarkdown>{narrative}</ReactMarkdown>
          </div>
        ) : (
          <div className="flex items-center justify-center min-h-[200px]">
            <div className="text-center">
              <p className="text-muted-foreground mb-4">
                {memoryCount > 5 
                  ? "Click below to generate your life narrative."
                  : `You have ${memoryCount} memories. Add ${Math.max(0, 6 - memoryCount)} more memories to auto-generate your narrative, or generate one manually.`
                }
              </p>
              <Button onClick={handleGenerateNarrative} disabled={isGenerating}>
                {isGenerating ? 'Generating...' : 'Generate Narrative'}
              </Button>
            </div>
          </div>
        )}
      </div>
      
      {/* Sticky Footer - Always show when narrative exists */}
      {narrative && (
        <div className="px-6 pb-4 pt-4 border-t border-border/50 flex-shrink-0">
          <div className="flex justify-end">
            <Button 
              onClick={handleGenerateNarrative} 
              disabled={isGenerating} 
              variant="ghost" 
              size="sm"
            >
              {isGenerating ? 'Regenerating...' : 'Regenerate Narrative'}
            </Button>
          </div>
        </div>
      )}
    </motion.div>
  );
} 