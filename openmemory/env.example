# Jean Memory Environment Configuration
# Copy this file to api/.env and update with your values

# =============================================================================
# LOCAL DEVELOPMENT SETUP (Docker containers + Supabase CLI)
# =============================================================================
# Use these settings when running with `make backend` or `make up`
# The setup scripts will automatically configure these for local development

# User ID for local development (required for local auth bypass)
USER_ID=00000000-0000-0000-0000-000000000001

# Database Configuration (Supabase CLI - auto-configured)
DATABASE_URL=postgresql://postgres:postgres@localhost:54322/postgres

# Supabase Local Configuration (auto-generated by 'npx supabase start')
NEXT_PUBLIC_SUPABASE_URL=http://127.0.0.1:54321
NEXT_PUBLIC_SUPABASE_ANON_KEY=auto-generated-by-setup
SUPABASE_SERVICE_KEY=auto-generated-by-setup

# Qdrant Configuration (Docker Qdrant - NO SSL/AUTH)
QDRANT_HOST=localhost
QDRANT_PORT=6333
QDRANT_API_KEY=                          # IMPORTANT: Leave empty for local Docker Qdrant
MAIN_QDRANT_COLLECTION_NAME=openmemory_dev
UNIFIED_QDRANT_COLLECTION_NAME=unified_memory_dev

# Neo4j Configuration (Docker Neo4j - local development)
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=fasho93fasho             # Default local password

# Unified Memory System Configuration
USE_UNIFIED_MEMORY=true
ENVIRONMENT=development

# =============================================================================
# PRODUCTION SETUP (Cloud services)
# =============================================================================
# For production deployment, update these with your cloud service credentials:
#
# DATABASE_URL=postgresql://postgres:[PASSWORD]@db.[PROJECT].supabase.co:5432/postgres
# SUPABASE_URL=https://your-project.supabase.co
# SUPABASE_ANON_KEY=your_supabase_anon_key
# SUPABASE_SERVICE_KEY=your_supabase_service_key
#
# QDRANT_HOST=your-cluster.region.gcp.cloud.qdrant.io
# QDRANT_API_KEY=your_qdrant_cloud_api_key
# MAIN_QDRANT_COLLECTION_NAME=your_main_collection
# UNIFIED_QDRANT_COLLECTION_NAME=unified_memory_prod
#
# NEO4J_URI=neo4j+s://your-instance.databases.neo4j.io
# NEO4J_USER=neo4j
# NEO4J_PASSWORD=your_neo4j_auradb_password
#
# ENVIRONMENT=production

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# OpenAI Configuration (REQUIRED - get from https://platform.openai.com/api-keys)
OPENAI_API_KEY=your_openai_api_key_here
LLM_PROVIDER=openai
OPENAI_MODEL=gpt-4o-mini
EMBEDDER_PROVIDER=openai
EMBEDDER_MODEL=text-embedding-3-small

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================

# Optional API Keys for additional integrations
GEMINI_API_KEY=
ANTHROPIC_API_KEY=
APIFY_TOKEN=

# Application Settings
DEBUG=true
LOG_LEVEL=INFO
PYTHONUNBUFFERED=1
UVICORN_TIMEOUT_KEEP_ALIVE=75

# Skip config validation during setup
SKIP_CONFIG_VALIDATION=false

# =============================================================================
# MCP (Model Context Protocol) COMPATIBILITY
# =============================================================================
# This setup is compatible with Claude Desktop via MCP.
# After local setup, you can connect Claude Desktop using:
#
# Add to ~/.anthropic/claude_desktop_config.json:
# {
#   "mcpServers": {
#     "local-memory": {
#       "command": "npx",
#       "args": ["supergateway", "sse://http://localhost:8765/mcp/claude/sse/local_dev_user"]
#     }
#   }
# }
#
# Available tools in Claude: ask_memory, add_memories, search_memory, 
# list_memories, deep_memory_query 