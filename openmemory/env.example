# Jean Memory Environment Configuration
# Copy this file to api/.env and update with your values

# =============================================================================
# LOCAL DEVELOPMENT SETUP (Docker containers)
# =============================================================================
# Use these settings when running with `make backend` or `make up`
# The setup scripts will automatically configure these for local development

# User ID for local development (required for local auth bypass)
USER_ID=00000000-0000-0000-0000-000000000001

# Database Configuration (Docker PostgreSQL)
DATABASE_URL=postgresql://jean_memory:memory_password@localhost:5432/jean_memory_db

# Qdrant Configuration (Docker Qdrant - NO SSL/AUTH)
QDRANT_HOST=localhost
QDRANT_PORT=6333
QDRANT_API_KEY=                          # IMPORTANT: Leave empty for local Docker Qdrant

# =============================================================================
# PRODUCTION SETUP (Cloud services)
# =============================================================================
# For production deployment, update these with your cloud service credentials:
#
# QDRANT_HOST=your-cluster.region.gcp.cloud.qdrant.io
# QDRANT_API_KEY=your_qdrant_cloud_api_key
# DATABASE_URL=postgresql://user:pass@your-db-host:5432/dbname
# SUPABASE_URL=https://your-project.supabase.co
# SUPABASE_ANON_KEY=your_supabase_anon_key
# SUPABASE_SERVICE_KEY=your_supabase_service_key

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# OpenAI Configuration (REQUIRED - get from https://platform.openai.com/api-keys)
OPENAI_API_KEY=your_openai_api_key_here
LLM_PROVIDER=openai
OPENAI_MODEL=gpt-4o-mini
EMBEDDER_PROVIDER=openai
EMBEDDER_MODEL=text-embedding-3-small

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================

# Supabase Configuration (not needed for local development)
SUPABASE_URL=
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_KEY=

# Optional API Keys for additional integrations
GEMINI_API_KEY=
ANTHROPIC_API_KEY=
APIFY_TOKEN=

# SMS Integration (Twilio) - Pro Feature
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_PHONE_NUMBER=
SMS_RATE_LIMIT_PRO=50
SMS_RATE_LIMIT_ENTERPRISE=200
SMS_VERIFICATION_TIMEOUT=600

# Application Settings
DEBUG=true
LOG_LEVEL=INFO
PYTHONUNBUFFERED=1
UVICORN_TIMEOUT_KEEP_ALIVE=75

# Skip config validation during setup
SKIP_CONFIG_VALIDATION=false

# =============================================================================
# MCP (Model Context Protocol) COMPATIBILITY
# =============================================================================
# This setup is compatible with Claude Desktop via MCP.
# After local setup, you can connect Claude Desktop using:
#
# Add to ~/.anthropic/claude_desktop_config.json:
# {
#   "mcpServers": {
#     "local-memory": {
#       "command": "npx",
#       "args": ["supergateway", "sse://http://localhost:8765/mcp/claude/sse/local_dev_user"]
#     }
#   }
# }
#
# Available tools in Claude: ask_memory, add_memories, search_memory, 
# list_memories, deep_memory_query

# =============================================================================
# PHASE 2: PGVECTOR CONFIGURATION (Unified Memory Migration)
# =============================================================================
# For Phase 2 of the unified memory migration - pgvector setup alongside Qdrant

# ðŸŽ¯ SMART CONFIGURATION: REUSES EXISTING DATABASE_URL!
# In production, pgvector automatically uses your existing Supabase credentials
# No additional environment variables needed! 

# pgvector Configuration (for local development only)
PGVECTOR_HOST=localhost
PGVECTOR_PORT=5432
PGVECTOR_DATABASE=jean_memory_db
PGVECTOR_USER=jean_memory
PGVECTOR_PASSWORD=memory_password
PGVECTOR_TABLE_PREFIX=unified_memory_

# PRODUCTION CONFIGURATION (NO ACTION NEEDED):
# âœ… pgvector automatically reuses your existing:
#    - DATABASE_URL (same database as your main app)
#    - SUPABASE_URL 
#    - SUPABASE_SERVICE_KEY
# 
# Connection options:
# - PGVECTOR_USE_DIRECT_CONNECTION=true (default, recommended for pgvector)
# - PGVECTOR_USE_DIRECT_CONNECTION=false (use existing pooler connection)

# OPTIONAL OVERRIDES (only set if you need custom values):
# PGVECTOR_HOST=custom.host.com
# PGVECTOR_PASSWORD=custom_password
# PGVECTOR_TABLE_PREFIX=custom_prefix_

# ðŸ“‹ SETUP CHECKLIST:
# 1. âœ… No new environment variables needed in production
# 2. ðŸ”§ Enable "vector" extension in Supabase dashboard  
# 3. ðŸ§ª Run validation: python test_phase2_pgvector.py
# 4. ðŸš€ Deploy and check logs for connection status 