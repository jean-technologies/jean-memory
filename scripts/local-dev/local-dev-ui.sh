#!/bin/bash

# Local development script for running the UI locally
# while connecting to Docker-based backend services

# Colors for better readability
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Directory paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
UI_DIR="$PROJECT_ROOT/openmemory/ui"
API_DIR="$PROJECT_ROOT/openmemory/api"
BACKEND_RUNNING=false

# Check if backend services are running
if docker ps | grep -q "jeanmemory_api_service"; then
  BACKEND_RUNNING=true
  echo -e "${GREEN}✓${NC} Backend services are running in Docker"
else
  echo -e "${YELLOW}⚠${NC} Backend services are not running. Starting them now..."
  cd "$PROJECT_ROOT/openmemory" && docker-compose up -d api postgres_db qdrant_db
  
  # Wait for backend to be ready
  echo -e "${BLUE}i${NC} Waiting for backend services to be ready..."
  sleep 10
  
  if docker ps | grep -q "jeanmemory_api_service"; then
    BACKEND_RUNNING=true
    echo -e "${GREEN}✓${NC} Backend services started successfully"
  else
    echo -e "${RED}✗${NC} Failed to start backend services. Please check docker-compose logs."
    exit 1
  fi
fi

# Set up environment for local UI development
echo -e "${BLUE}i${NC} Setting up local UI environment..."

# Make sure UI directory exists
if [ ! -d "$UI_DIR" ]; then
  echo -e "${RED}✗${NC} UI directory not found at $UI_DIR"
  exit 1
fi

# Get Gemini API Key from API .env file if it exists
GEMINI_API_KEY=""
if [ -f "$API_DIR/.env" ]; then
  GEMINI_API_KEY=$(grep "GEMINI_API_KEY" "$API_DIR/.env" | cut -d '=' -f2)
  if [ -n "$GEMINI_API_KEY" ]; then
    echo -e "${GREEN}✓${NC} Found Gemini API key in API .env file"
  else
    echo -e "${YELLOW}⚠${NC} Gemini API key not found in API .env file"
  fi
fi

# Create or update local environment file
cat > "$UI_DIR/.env.local" << EOL
# Local development environment - auto-generated by local-dev-ui.sh
NEXT_PUBLIC_API_URL=http://localhost:8765
NEXT_PUBLIC_USER_ID=local_dev_user
NEXT_TELEMETRY_DISABLED=1
EOL

# Add Gemini API key if available
if [ -n "$GEMINI_API_KEY" ]; then
  echo "NEXT_PUBLIC_GEMINI_API_KEY=$GEMINI_API_KEY" >> "$UI_DIR/.env.local"
fi

echo -e "${GREEN}✓${NC} Created/updated .env.local for local development"

# Using existing Next.js configuration
echo -e "${BLUE}i${NC} Using existing Next.js configuration"

# Change to UI directory
cd "$UI_DIR"

# Check if dependencies are installed
if [ ! -d "node_modules" ]; then
  echo -e "${YELLOW}⚠${NC} Node modules not found. Installing dependencies..."
  if command -v pnpm >/dev/null 2>&1; then
    pnpm install
  else
    npm install --legacy-peer-deps
  fi
fi

# Run the UI with Turbopack if available
echo -e "${GREEN}✓${NC} Starting Next.js development server..."
echo -e "${BLUE}i${NC} The UI will be available at ${GREEN}http://localhost:3000${NC}"
echo -e "${BLUE}i${NC} Press Ctrl+C to stop the development server"
echo ""

# Run the development server
if command -v pnpm >/dev/null 2>&1; then
  echo -e "${BLUE}i${NC} Using pnpm development server"
  NODE_OPTIONS="--max-old-space-size=4096" pnpm dev
else
  echo -e "${BLUE}i${NC} Using npm development server"
  NODE_OPTIONS="--max-old-space-size=4096" npm run dev
fi 